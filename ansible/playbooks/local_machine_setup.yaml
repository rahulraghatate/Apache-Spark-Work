---
 - hosts: localhost
   become: true
   tasks:

     - name: update/upgrade
       apt: update-cache=yes upgrade=dist

     - name: install build_essentials       
       apt: name={{item}} state=present update_cache=yes
       with_items:
          - python-setuptools
          - python-pip
          - expect
          - git
          - build-essential
          - libpam-umask
          - libssl-dev
          - libffi-dev
          - python-dev
          - libncurses-dev
          - libreadline-gplv2-dev
          - libncursesw5-dev
          - libsqlite3-dev
          - tk-dev
          - libgdbm-dev
          - libc6-dev
          - libbz2-dev

     - name: pip upgrade
       command: pip install --upgrade pip

     - name: git_config
       become_user: rahul
       shell: |
          git config --global user.name "Rahul Raghatate"
          git config --global user.email rvraghatate10@gmail.com

     - name: install python-dependency packages       
       action: pip name={{item}} state=present
       with_items:
          - pycrypto
          - virtualenv
          - virtualenvwrapper
          - cryptography
          - httplib2

     - name: Manually create the initial virtualenv
       command: virtualenv -p /usr/bin/python $HOME/ENV

     - name: start virtualenv
       shell: source "$HOME/ENV/bin/activate"
       args:
         executable: /bin/bash

     - name: Check if cloudmesh directory already exists       
       become_user: rahul
       stat: path=/usr/local/bin/cm
       register: cloudmesh_flag

     - name: Install cloudmesh_client       
       pip: name=cloudmesh_client state=latest
       when: cloudmesh_flag.stat.exists == false

     - name: cm reset
       become_user: rahul
       command: cm reset
       when: cloudmesh_flag.stat.exists == true

     - name: Upgrade cloudmesh_client       
       pip: name=cloudmesh_client state=absent
       when: cloudmesh_flag.stat.exists == true

     - name: install
       pip: name=cloudmesh_client state=latest
       when: cloudmesh_flag.stat.exists == true

     - name: ssh key_check       
       stat: path=$HOME/.ssh/id_rsa.pub
       register: ssh_key_pub_flag

     - name:  create new ssh key if previously doesn't exist       
       shell: ssh-keygen -b 2048 -t rsa -f $HOME/.ssh/id_rsa -q -N ""
       args:
          creates: $HOME/.ssh/rsa_pub
       when: ssh_key_pub_flag.stat.exists == false
